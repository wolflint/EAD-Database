--------------------------------------------------------------
-- Database creation Script

-- Auto-Generated by QSEE-SuperLite (c) 2001-2004 QSEE-Technologies Ltd.

-- Verbose generation: ON

-- note: spaces within table/column names have been replaced by underscores (_)

-- Target DB: ORACLE Version: 8

-- Entity Model :Entity Relationship Diagram

-- To drop the tables generated by this script run -
--   'C:\Users\wolfl\Desktop\ERD-Database-WIP_drop.sql'

--------------------------------------------------------------



--------------------------------------------------------------
-- Table Creation --

-- Each entity on the model is represented by a table that needs to be created within the Database.
-- Within SQL new tables are created using the CREATE TABLE command.
-- When a table is created its name and its attributes are defined.
-- The values of which are derived from those specified on the model.
-- Certain constraints are sometimes also specified, such as identification of primary keys.

-- Create a Database table to represent the "Employee" entity.
CREATE TABLE Employee(
	EmployeeID	INTEGER NOT NULL,
	FirstName	VARCHAR2(20) NOT NULL,
	LastName	VARCHAR2(40) NOT NULL,
	PayRate	DECIMAL(8,2) NOT NULL,
	HomePhone	VARCHAR2(12) NOT NULL,
	MobilePhone	VARCHAR2(12) NOT NULL,
	AddressLine1	VARCHAR2(30) NOT NULL,
	AddressLine2	VARCHAR2(20),
	Province	VARCHAR2(20) NOT NULL,
	City	VARCHAR2(20) NOT NULL,
	PostCode	VARCHAR2(8) NOT NULL,
	SkillLevel	INTEGER NOT NULL,
	fk1_ManagerID	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "Employee".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Employee PRIMARY KEY (EmployeeID,fk1_ManagerID)
);

-- Create a Database table to represent the "Project" entity.
CREATE TABLE Project(
	ProjectID	INTEGER NOT NULL,
	AgreedBillableHours	INTEGER NOT NULL,
	CurrentBillableHours	INTEGER,
	Name	VARCHAR2(20) NOT NULL,
	StartDate	DATE NOT NULL,
	EstimatedEndDate	DATE NOT NULL,
	AgreedPrice	DECIMAL(8,2) NOT NULL,
	fk1_ClientID	INTEGER NOT NULL,
	fk2_ContactID	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "Project".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Project PRIMARY KEY (ProjectID)
);

-- Create a Database table to represent the "Client" entity.
CREATE TABLE Client(
	ClientID	INTEGER NOT NULL,
	FirstName	VARCHAR2(15) NOT NULL,
	LastName	VARCHAR2(30) NOT NULL,
	WorkPhone	VARCHAR2(12) NOT NULL,
	MobilePhone	VARCHAR2(12) NOT NULL,
	AddressLine1	VARCHAR2(30) NOT NULL,
	AddressLine2	VARCHAR2(30),
	Province	VARCHAR2(20) NOT NULL,
	City	VARCHAR2(20) NOT NULL,
	PostCode	VARCHAR2(8) NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "Client".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Client PRIMARY KEY (ClientID)
);

-- Create a Database table to represent the "Contact" entity.
CREATE TABLE Contact(
	ContactID	INTEGER NOT NULL,
	FirstName	VARCHAR2(20) NOT NULL,
	LastName	VARCHAR2(30) NOT NULL,
	Phone	VARCHAR2(12),
	Email	VARCHAR2(40),
	fk1_ClientID	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "Contact".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Contact PRIMARY KEY (ContactID)
);

-- Create a Database table to represent the "Manager" entity.
CREATE TABLE Manager(
	ManagerID	INTEGER NOT NULL,
	FirstName	VARCHAR2(20) NOT NULL,
	LastName	VARCHAR2(40) NOT NULL,
	Salary	DECIMAL(8,2) NOT NULL,
	AddressLine1	VARCHAR2(20) NOT NULL,
	AddressLine2	VARCHAR2(20),
	Province	VARCHAR2(20),
	City	VARCHAR2(20) NOT NULL,
	PostCode	VARCHAR2(8) NOT NULL,
	HomePhone	VARCHAR2(12),
	MobilePhone	VARCHAR2(12),
	Email	VARCHAR2(40),
	-- Specify the PRIMARY KEY constraint for table "Manager".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Manager PRIMARY KEY (ManagerID)
);

-- Create a Database table to represent the "Role" entity.
CREATE TABLE Role(
	RoleID	INTEGER NOT NULL,
	Title	VARCHAR2(20) NOT NULL UNIQUE,
	IsBillable	SMALLINT NOT NULL,
	BaseSalary	INTEGER,
	-- Specify the PRIMARY KEY constraint for table "Role".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Role PRIMARY KEY (RoleID)
);

-- Create a Database table to represent the "Employee_Project" entity.
CREATE TABLE Employee_Project(
	HoursWorked	INTEGER,
	fk1_ProjectID	INTEGER NOT NULL,
	fk2_EmployeeID	INTEGER NOT NULL,
	fk2_fk1_ManagerID	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "Employee_Project".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Employee_Project PRIMARY KEY (fk1_ProjectID,fk2_EmployeeID,fk2_fk1_ManagerID)
);


--------------------------------------------------------------
-- Create LINK tables --

-- These tables do not appear as entities on the model. The reason they are created
-- is to allow certain types of relationships to be implemented in a Relational type Database.
-- Each link table tends to represent a specific relationship that appears on the model.
-- The attributes contained in link tables are identified from the entities at either side
-- of the relationship. i.e. they do not define attributes in their own right.
-- Indeed foreign key constraints are always created to ensure referential integrity between the
-- link table attributes and the primary key attributes on which they are based.

-- Create a link table to represent the "Employee_Role" relationship.
-- The attributes of this table are taken from the primary keys of table "Employee" and
-- table "Role", i.e. each end of the relationship. A link table was created
-- because "Employee_Role" is a many to many relationship which required resolving.
-- notice how the primary key is a combination of the keys from both related tables (Employee and Role).
CREATE TABLE Employee_Role(
	s_EmployeeID	INTEGER NOT NULL,
	s_fk1_ManagerID	INTEGER NOT NULL,
	d_RoleID	INTEGER NOT NULL,
	PRIMARY KEY (s_EmployeeID,s_fk1_ManagerID,d_RoleID),
	FOREIGN KEY(s_EmployeeID,s_fk1_ManagerID) REFERENCES Employee(EmployeeID,fk1_ManagerID) ,
	FOREIGN KEY(d_RoleID) REFERENCES Role(RoleID)
);


--------------------------------------------------------------
-- Alter Tables to add fk constraints --

-- Now all the tables have been created the ALTER TABLE command is used to define some additional
-- constraints.  These typically constrain values of foreign keys to be associated in some way
-- with the primary keys of related tables.  Foreign key constraints can actually be specified
-- when each table is created, but doing so can lead to dependency problems within the script
-- i.e. tables may be referenced before they have been created.  This method is therefore safer.

-- Alter table to add new constraints required to implement the "Employee_Manager" relationship

-- This constraint ensures that the foreign key of table "Employee"
-- correctly references the primary key of table "Manager"

ALTER TABLE Employee
ADD (
	CONSTRAINT fk1_Employee_to_Manager FOREIGN KEY(fk1_ManagerID) REFERENCES Manager(ManagerID)
);

-- Alter table to add new constraints required to implement the "Contact_Client" relationship

-- This constraint ensures that the foreign key of table "Contact"
-- correctly references the primary key of table "Client"

ALTER TABLE Contact
ADD (
	CONSTRAINT fk1_Contact_to_Client FOREIGN KEY(fk1_ClientID) REFERENCES Client(ClientID)
);

-- Alter table to add new constraints required to implement the "Project_Client" relationship

-- This constraint ensures that the foreign key of table "Project"
-- correctly references the primary key of table "Client"

ALTER TABLE Project
ADD (
	CONSTRAINT fk1_Project_to_Client FOREIGN KEY(fk1_ClientID) REFERENCES Client(ClientID)
);

-- Alter table to add new constraints required to implement the "Project_Contact" relationship

-- This constraint ensures that the foreign key of table "Project"
-- correctly references the primary key of table "Contact"

ALTER TABLE Project
ADD (
	CONSTRAINT fk2_Project_to_Contact FOREIGN KEY(fk2_ContactID) REFERENCES Contact(ContactID)
);

-- Alter table to add new constraints required to implement the "Employee_Project_Project" relationship

-- This constraint ensures that the foreign key of table "Employee_Project"
-- correctly references the primary key of table "Project"

ALTER TABLE Employee_Project
ADD (
	CONSTRAINT fk1_Employee_Project_to_Proj1 FOREIGN KEY(fk1_ProjectID) REFERENCES Project(ProjectID)
);

-- Alter table to add new constraints required to implement the "Employee_Project_Employee" relationship

-- This constraint ensures that the foreign key of table "Employee_Project"
-- correctly references the primary key of table "Employee"

ALTER TABLE Employee_Project
ADD (
	CONSTRAINT fk2_Employee_Project_to_Empl2 FOREIGN KEY(fk2_EmployeeID,fk2_fk1_ManagerID) REFERENCES Employee(EmployeeID,fk1_ManagerID)
);


--------------------------------------------------------------
-- End of DDL file auto-generation
--------------------------------------------------------------
